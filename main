from flask import Flask, request, jsonify
from flask_bcrypt import Bcrypt
import jwt
import datetime

app = Flask(__name__)
bcrypt = Bcrypt(app)

# Secret key for JWT
app.config['SECRET_KEY'] = 'your_secret_key_here'

# In-memory database
users_db = {}
roles_permissions = {
    'Admin': ['create', 'read', 'update', 'delete'],
    'Moderator': ['read', 'update'],
    'User': ['read']
}

# Utility function to generate JWT
def generate_token(username, role):
    payload = {
        'username': username,
        'role': role,
        'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=1)
    }
    token = jwt.encode(payload, app.config['SECRET_KEY'], algorithm='HS256')
    return token

# Middleware for protected routes
def token_required(f):
    def wrapper(*args, **kwargs):
        token = request.headers.get('Authorization')
        if not token:
            return jsonify({'error': 'Token is missing!'}), 401
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
            request.user = data
        except jwt.ExpiredSignatureError:
            return jsonify({'error': 'Token has expired!'}), 401
        except jwt.InvalidTokenError:
            return jsonify({'error': 'Invalid token!'}), 401
        return f(*args, **kwargs)
    return wrapper

# RBAC middleware
def role_required(required_permissions):
    def decorator(f):
        def wrapper(*args, **kwargs):
            user_role = request.user.get('role')
            if not user_role or not any(perm in roles_permissions.get(user_role, []) for perm in required_permissions):
                return jsonify({'error': 'Access denied!'}), 403
            return f(*args, **kwargs)
        return wrapper
    return decorator

# Routes
@app.route('/register', methods=['POST'])
def register():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    role = data.get('role', 'User')  # Default role is "User"
    
    if username in users_db:
        return jsonify({'error': 'User already exists!'}), 400
    if role not in roles_permissions:
        return jsonify({'error': 'Invalid role!'}), 400
    
    hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')
    users_db[username] = {'password': hashed_password, 'role': role}
    return jsonify({'message': 'User registered successfully!'}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    
    user = users_db.get(username)
    if not user or not bcrypt.check_password_hash(user['password'], password):
        return jsonify({'error': 'Invalid username or password!'}), 401
    
    token = generate_token(username, user['role'])
    return jsonify({'token': token}), 200

@app.route('/protected', methods=['GET'])
@token_required
@role_required(['read'])
def protected():
    return jsonify({'message': f'Hello {request.user["username"]}! You have access.'}), 200

@app.route('/admin', methods=['POST'])
@token_required
@role_required(['create'])
def admin_only():
    return jsonify({'message': 'Admin access granted!'}), 200

@app.route('/logout', methods=['POST'])
def logout():
    # For stateless JWT, logout is usually handled client-side by deleting the token.
    return jsonify({'message': 'Logged out successfully!'}), 200

if __name__ == '__main__':
    app.run(debug=True)
